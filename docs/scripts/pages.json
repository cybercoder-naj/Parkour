[{"name":"abstract fun fetchLine(lineNumber: Int): String?","description":"io.github.cybercodernaj.parkour.core.datasource.TextSource.fetchLine","location":"-parkour/io.github.cybercodernaj.parkour.core.datasource/-text-source/fetch-line.html","searchKeys":["fetchLine","abstract fun fetchLine(lineNumber: Int): String?","io.github.cybercodernaj.parkour.core.datasource.TextSource.fetchLine"]},{"name":"class FileSource(file: File) : TextSource","description":"io.github.cybercodernaj.parkour.core.datasource.FileSource","location":"-parkour/io.github.cybercodernaj.parkour.core.datasource/-file-source/index.html","searchKeys":["FileSource","class FileSource(file: File) : TextSource","io.github.cybercodernaj.parkour.core.datasource.FileSource"]},{"name":"class Lexer(val skipCharacters: Regex = Regex(\"\\\\s\"), val singleLineComments: String? = null, val multilineComments: Pair<String, String>? = null, val identifiers: Regex = Regex(\"[a-zA-Z_]\\\\w*\"), val keywords: List<String> = emptyList<String>(), val operators: List<String> = emptyList<String>(), val separators: List<String> = emptyList<String>(), val literals: Literals = Literals())","description":"io.github.cybercodernaj.parkour.core.lexer.Lexer","location":"-parkour/io.github.cybercodernaj.parkour.core.lexer/-lexer/index.html","searchKeys":["Lexer","class Lexer(val skipCharacters: Regex = Regex(\"\\\\s\"), val singleLineComments: String? = null, val multilineComments: Pair<String, String>? = null, val identifiers: Regex = Regex(\"[a-zA-Z_]\\\\w*\"), val keywords: List<String> = emptyList<String>(), val operators: List<String> = emptyList<String>(), val separators: List<String> = emptyList<String>(), val literals: Literals = Literals())","io.github.cybercodernaj.parkour.core.lexer.Lexer"]},{"name":"class Literals","description":"io.github.cybercodernaj.parkour.core.lexer.Literals","location":"-parkour/io.github.cybercodernaj.parkour.core.lexer/-literals/index.html","searchKeys":["Literals","class Literals","io.github.cybercodernaj.parkour.core.lexer.Literals"]},{"name":"class StringSource(contents: String) : TextSource","description":"io.github.cybercodernaj.parkour.core.datasource.StringSource","location":"-parkour/io.github.cybercodernaj.parkour.core.datasource/-string-source/index.html","searchKeys":["StringSource","class StringSource(contents: String) : TextSource","io.github.cybercodernaj.parkour.core.datasource.StringSource"]},{"name":"constructor()","description":"io.github.cybercodernaj.parkour.core.lexer.Literals.Literals","location":"-parkour/io.github.cybercodernaj.parkour.core.lexer/-literals/-literals.html","searchKeys":["Literals","constructor()","io.github.cybercodernaj.parkour.core.lexer.Literals.Literals"]},{"name":"constructor(contents: String)","description":"io.github.cybercodernaj.parkour.core.datasource.StringSource.StringSource","location":"-parkour/io.github.cybercodernaj.parkour.core.datasource/-string-source/-string-source.html","searchKeys":["StringSource","constructor(contents: String)","io.github.cybercodernaj.parkour.core.datasource.StringSource.StringSource"]},{"name":"constructor(file: File)","description":"io.github.cybercodernaj.parkour.core.datasource.FileSource.FileSource","location":"-parkour/io.github.cybercodernaj.parkour.core.datasource/-file-source/-file-source.html","searchKeys":["FileSource","constructor(file: File)","io.github.cybercodernaj.parkour.core.datasource.FileSource.FileSource"]},{"name":"constructor(skipCharacters: Regex = Regex(\"\\\\s\"), singleLineComments: String? = null, multilineComments: Pair<String, String>? = null, identifiers: Regex = Regex(\"[a-zA-Z_]\\\\w*\"), keywords: List<String> = emptyList<String>(), operators: List<String> = emptyList<String>(), separators: List<String> = emptyList<String>(), literals: Literals = Literals())","description":"io.github.cybercodernaj.parkour.core.lexer.Lexer.Lexer","location":"-parkour/io.github.cybercodernaj.parkour.core.lexer/-lexer/-lexer.html","searchKeys":["Lexer","constructor(skipCharacters: Regex = Regex(\"\\\\s\"), singleLineComments: String? = null, multilineComments: Pair<String, String>? = null, identifiers: Regex = Regex(\"[a-zA-Z_]\\\\w*\"), keywords: List<String> = emptyList<String>(), operators: List<String> = emptyList<String>(), separators: List<String> = emptyList<String>(), literals: Literals = Literals())","io.github.cybercodernaj.parkour.core.lexer.Lexer.Lexer"]},{"name":"interface TextSource","description":"io.github.cybercodernaj.parkour.core.datasource.TextSource","location":"-parkour/io.github.cybercodernaj.parkour.core.datasource/-text-source/index.html","searchKeys":["TextSource","interface TextSource","io.github.cybercodernaj.parkour.core.datasource.TextSource"]},{"name":"open override fun fetchLine(lineNumber: Int): String?","description":"io.github.cybercodernaj.parkour.core.datasource.FileSource.fetchLine","location":"-parkour/io.github.cybercodernaj.parkour.core.datasource/-file-source/fetch-line.html","searchKeys":["fetchLine","open override fun fetchLine(lineNumber: Int): String?","io.github.cybercodernaj.parkour.core.datasource.FileSource.fetchLine"]},{"name":"open override fun fetchLine(lineNumber: Int): String?","description":"io.github.cybercodernaj.parkour.core.datasource.StringSource.fetchLine","location":"-parkour/io.github.cybercodernaj.parkour.core.datasource/-string-source/fetch-line.html","searchKeys":["fetchLine","open override fun fetchLine(lineNumber: Int): String?","io.github.cybercodernaj.parkour.core.datasource.StringSource.fetchLine"]},{"name":"val identifiers: Regex","description":"io.github.cybercodernaj.parkour.core.lexer.Lexer.identifiers","location":"-parkour/io.github.cybercodernaj.parkour.core.lexer/-lexer/identifiers.html","searchKeys":["identifiers","val identifiers: Regex","io.github.cybercodernaj.parkour.core.lexer.Lexer.identifiers"]},{"name":"val keywords: List<String>","description":"io.github.cybercodernaj.parkour.core.lexer.Lexer.keywords","location":"-parkour/io.github.cybercodernaj.parkour.core.lexer/-lexer/keywords.html","searchKeys":["keywords","val keywords: List<String>","io.github.cybercodernaj.parkour.core.lexer.Lexer.keywords"]},{"name":"val literals: Literals","description":"io.github.cybercodernaj.parkour.core.lexer.Lexer.literals","location":"-parkour/io.github.cybercodernaj.parkour.core.lexer/-lexer/literals.html","searchKeys":["literals","val literals: Literals","io.github.cybercodernaj.parkour.core.lexer.Lexer.literals"]},{"name":"val multilineComments: Pair<String, String>? = null","description":"io.github.cybercodernaj.parkour.core.lexer.Lexer.multilineComments","location":"-parkour/io.github.cybercodernaj.parkour.core.lexer/-lexer/multiline-comments.html","searchKeys":["multilineComments","val multilineComments: Pair<String, String>? = null","io.github.cybercodernaj.parkour.core.lexer.Lexer.multilineComments"]},{"name":"val operators: List<String>","description":"io.github.cybercodernaj.parkour.core.lexer.Lexer.operators","location":"-parkour/io.github.cybercodernaj.parkour.core.lexer/-lexer/operators.html","searchKeys":["operators","val operators: List<String>","io.github.cybercodernaj.parkour.core.lexer.Lexer.operators"]},{"name":"val separators: List<String>","description":"io.github.cybercodernaj.parkour.core.lexer.Lexer.separators","location":"-parkour/io.github.cybercodernaj.parkour.core.lexer/-lexer/separators.html","searchKeys":["separators","val separators: List<String>","io.github.cybercodernaj.parkour.core.lexer.Lexer.separators"]},{"name":"val singleLineComments: String? = null","description":"io.github.cybercodernaj.parkour.core.lexer.Lexer.singleLineComments","location":"-parkour/io.github.cybercodernaj.parkour.core.lexer/-lexer/single-line-comments.html","searchKeys":["singleLineComments","val singleLineComments: String? = null","io.github.cybercodernaj.parkour.core.lexer.Lexer.singleLineComments"]},{"name":"val skipCharacters: Regex","description":"io.github.cybercodernaj.parkour.core.lexer.Lexer.skipCharacters","location":"-parkour/io.github.cybercodernaj.parkour.core.lexer/-lexer/skip-characters.html","searchKeys":["skipCharacters","val skipCharacters: Regex","io.github.cybercodernaj.parkour.core.lexer.Lexer.skipCharacters"]}]
